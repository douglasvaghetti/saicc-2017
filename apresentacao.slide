Go
Uma introdução rápida
15:04 29 Aug 2017
Tags: foo, bar, baz

Douglas Silva Vaghetti
Software Engineer, DevOpers Cloud Solutions
douglas@devopers.com.br
https://devopers.com.br/


* Sobre mim
.background imgs/bg.png
- Engenharia de Computação - FURG
- DevOpers Cloud Solutions - Junho/2015 - Hoje
- Usando Go - 1 ano e meio
- Desenvolvimento de jogos - Romance mal resolvido

* Como será o mini curso
.background imgs/bg.png
- Apresentação do Go (história, objetivos, principais caracteristicas, etc)
- Introdução da linguagem
- Goroutines e channels
- Um WebCrawler (semi)realista
- Interfaces, Readers e Writers
- Servidores Web



* Uma breve história do Go
.background imgs/bg.png
- 2007 - Início do desenvolvimento dentro do Google
- 2009 - Beta público
- 2012 - Go 1.0
- Hoje - Go 1.9 (lançou esse mês!)

* Quem usa Go?
.background imgs/bg.png
.image imgs/using-go.jpg

* E no Brasil?
.background imgs/bg.png
- Globo.com
- Mercado Livre
- PagSeguro
- TOTVS


* Uma noção de escala:
.background imgs/bg.png
.image imgs/go-vs-perl.png _ 900


* Uma noção de escala:
.background imgs/bg.png
.image imgs/go-vs-js.png _ 900


* Quais os objetivos da linguagem?
.background imgs/bg.png
- *Paralelismo* - Todos cores trabalhando
- *Familiar* - Novos contribuidores devem se adaptar rápido
- *Cooperação* - Go deve funcionar bem com muitos desenvolvedores
- *Desempenho* - Go deve ser rápido

* Comparação de desempenho
.background imgs/bg.png
- Mais ou menos próximo ao Java
- Bem mais rápido que Python
- Mais lento que C/C++



* Finalmente, Go:
.background imgs/bg.png
- *Compilado;*
- *Fortemente* *tipado;*
- *Garbage* *collector;*
- *Multiplataforma;*
- *Gopher.*
.image imgs/gophers.png





* Um tour pela linguagem
.background imgs/bg.png

* Um tour pela linguagem - Hello world
.background imgs/bg.png
.play samples/hello_world.go

* Um tour pela linguagem - Variáveis
.background imgs/bg.png
.play samples/variables.go

* Um tour pela linguagem - If
.background imgs/bg.png
.play samples/if.go

* Um tour pela linguagem - For
.background imgs/bg.png
.play samples/for.go

* Um tour pela linguagem - For (de novo)
.background imgs/bg.png
.play samples/for_again.go

* Um tour pela linguagem - For(ever)
.background imgs/bg.png
.play samples/forever.go

* Um tour pela linguagem - Funções
.background imgs/bg.png
.play samples/functions.go

* Um tour pela linguagem - Funções 2
.background imgs/bg.png
.play samples/functions_multiple_returns.go

* Um tour pela linguagem - Structs
.background imgs/bg.png
.play samples/structs.go

* Um tour pela linguagem - Structs - outra sintaxe
.background imgs/bg.png
.play samples/structs_short.go

* Um tour pela linguagem - Zero values
.background imgs/bg.png
.play samples/zero_values.go

* Um tour pela linguagem - Zero values
.background imgs/bg.png
- Bool: *false*
- Strings: *""*
- Int, Int64, Floats, etc: *0*
Isso mesmo, nada de lixo de memória!

* Um tour pela linguagem - Slices
.background imgs/bg.png
.play samples/slices.go

* Um tour pela linguagem - Slices usando o comando make
.background imgs/bg.png
.play samples/slices_make.go

* Um tour pela linguagem - For usando range
.background imgs/bg.png
.play samples/for_range.go


* Ok, agora é com vocês!
.background imgs/bg.png
- Abram o arquivo exercises/add_slices.go
- Preencham o corpo da função addSlices
- Use o seguinte comando para testar o seu código:
    go run exercises/add_slices.go

* Solução
.background imgs/bg.png
.play exercises/add_slices_solution.go /START OMIT/,/END OMIT/




* Goroutines
.background imgs/bg.png

* Goroutines
.background imgs/bg.png
- São o modelo de concorrência/paralelismo do Go;
- Ótima sintaxe
    go minhaFuncao()

* Goroutines
.background imgs/bg.png
.play samples/goroutines.go /START OMIT/,/END OMIT/

* Channels 
.background imgs/bg.png
- Channels são canais de comunicação entre goroutines
- Quando uma goroutine escreve em um channel, ela só pode escrever de novo quando ele for lido (se for um channel sem buffer)

* Channels
.background imgs/bg.png
.play samples/channels.go /START OMIT/,/END OMIT/

* Channels com buffer
.background imgs/bg.png
.play samples/channels_buffer.go /START OMIT/,/END OMIT/
 


* Um WebCrawler (semi)realista
.background imgs/bg.png

* Arquitetura
.background imgs/bg.png
.image imgs/webcrawler.png



* Continuação do tour
.background imgs/bg.png


* Métodos
.background imgs/bg.png
.play samples/methods.go /START OMIT/,/END OMIT/


* Interfaces
.background imgs/bg.png
- Implementação de interfaces implicita
- São um conjunto de métodos exigidos
.play samples/interfaces.go /START OMIT/,/END OMIT/

* Readers e Writers
.background imgs/bg.png
- Interfaces para escrita e leitura, *para* *qualquer* *coisa*.
- Escrevendo em um arquivo? *Readers* *e* *Writers*
- Respondendo requests web? *Readers* *e* *Writers*
- Compactadando/descompactando um arquivo? *Readers* *e* *Writers*
- Criptografando/Descriptografando um arquivo? *Readers* *e* *Writers*
- Compactando, criptografando e enviando um dado por uma conexão de rede de uma vez só?  *Readers* *e* *Writers*


* O servidor web mais fácil que vocês já viram
.background imgs/bg.png
.play samples/webserver.go /START OMIT/,/END OMIT/
Aperte Run e clique
.link http://127.0.0.1:50000 Aqui

* Exercício 
.background imgs/bg.png
- Façam uma página que conta quantas vezes ela já foi visitada
- Se o visitante for o número 7, peça o número de cartão de crédito dele para que ele possa ganhar um prêmio
- Ao abrir a página, ele deve exibir algo como:
    Olá, você é o visitante número 3.
- Caso seja o visitante número 7, deve exibir:
    Parabéns!!!
    Você é o visitante número 7, clique aqui para receber o seu prêmio!

* A ferramenta go
.background imgs/bg.png
- `go` `run/install/build`
- `go` `get`
- `go` `test`
- `go` `fmt`
- `go` `generate`
- `go` `doc`

* Testes unitários
TODO/Se sobrar tempo

* Perguntas?
.background imgs/bg.png
