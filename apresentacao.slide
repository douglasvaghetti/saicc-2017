Go
Uma introdução rápida
15:04 29 Aug 2017
Tags: foo, bar, baz

Douglas Silva Vaghetti
Software Engineer, DevOpers Cloud Solutions
douglas@devopers.com.br
https://devopers.com.br/

* Antes de tudo:
.background imgs/bg.png
    go get -u github.com/douglasvaghetti/saicc-2017
    go get golang.org/x/net
    go get golang.org/x/tools
    go install golang.org/x/tools/cmd/present


* Sobre mim
.background imgs/bg.png
- Engenharia de Computação - FURG
- DevOpers Cloud Solutions - Junho/2015 - Hoje
- Usando Go - 1 ano e meio
- Desenvolvimento de jogos - Romance mal resolvido
#8h18 min

* E vocês?
.background imgs/bg.png
#8h20 min

* Como será o mini curso
.background imgs/bg.png
- Apresentação do Go (história, objetivos, principais caracteristicas, etc)
- Introdução da linguagem
- Goroutines e channels
- Um WebCrawler (semi)realista
- Interfaces, Readers e Writers
- Servidores Web
#8h21 min



* Uma breve história do Go
.background imgs/bg.png
- 2007 - Início do desenvolvimento dentro do Google
- 2009 - Beta público
- 2012 - Go 1.0
- Hoje - Go 1.9 (lançou esse mês!)
#8h23 min

* Quem usa Go?
.background imgs/bg.png
.image imgs/using-go.jpg
#8h25m

* E no Brasil?
.background imgs/bg.png
- Globo.com
- Mercado Livre
- PagSeguro
- TOTVS
#8h27m


* Uma noção de escala:
.background imgs/bg.png
.html html/trends1.html
#8h30m


* Uma noção de escala:
.background imgs/bg.png
.html html/trends2.html
#8h34m


* Quais os objetivos da linguagem?
.background imgs/bg.png
- *Paralelismo* - Todos cores trabalhando
- *Familiar* - Novos contribuidores devem se adaptar rápido
- *Cooperação* - Go deve funcionar bem com muitos desenvolvedores
- *Desempenho* - Go deve ser rápido
#8h38m

* Comparação de desempenho
.background imgs/bg.png
- Mais ou menos próximo ao Java
- Bem mais rápido que Python
- Mais lento que C/C++
#8h41m



* Finalmente, Go:
.background imgs/bg.png
- *Compilado;*
- *Fortemente* *tipado;*
- *Garbage* *collector;*
- *Multiplataforma;*
- *Não* *é* *orientado* *a* *objetos;*
- *Gopher.*
.image imgs/gophers.png
#8h45m


* Perguntas?
.background imgs/bg.png
#8h50m


* Um tour pela linguagem
.background imgs/bg.png
#8h51m

* Um tour pela linguagem - Hello world
.background imgs/bg.png
.play samples/hello_world.go
#8h55m

* Um tour pela linguagem - Variáveis
.background imgs/bg.png
.play samples/variables.go
#9h0m

* Um tour pela linguagem - If
.background imgs/bg.png
.play samples/if.go
#9h2m

* Um tour pela linguagem - For
.background imgs/bg.png
.play samples/for.go
#9h4m

* Um tour pela linguagem - For (de novo)
.background imgs/bg.png
.play samples/for_again.go
#9h6m

* Um tour pela linguagem - For(ever)
.background imgs/bg.png
.play samples/forever.go
#9h8m

* Um tour pela linguagem - Funções
.background imgs/bg.png
.play samples/functions.go
#9h10m

* Um tour pela linguagem - Funções 2
.background imgs/bg.png
.play samples/functions_multiple_returns.go
#9h12m

* Um tour pela linguagem - Structs
.background imgs/bg.png
.play samples/structs.go
#9h14m

* Um tour pela linguagem - Structs - outra sintaxe
.background imgs/bg.png
.play samples/structs_short.go
#9h16m

* Um tour pela linguagem - Zero values
.background imgs/bg.png
.play samples/zero_values.go
#9h18m

* Um tour pela linguagem - Zero values
.background imgs/bg.png
- Bool: *false*
- Strings: *""*
- Int, Int64, Floats, etc: *0*
Isso mesmo, nada de lixo de memória!
#9h20m

* Um tour pela linguagem - Slices
.background imgs/bg.png
.play samples/slices.go
#9h22m

* Um tour pela linguagem - Slices usando o comando make
.background imgs/bg.png
.play samples/slices_make.go
#9h24m 

* Um tour pela linguagem - For usando range
.background imgs/bg.png
.play samples/for_range.go
#9h26m


* Ok, agora é com vocês!
.background imgs/bg.png
- Abram o arquivo exercises/add_slices.go
- Preencham o corpo da função addSlices
- Use o seguinte comando para testar o seu código:
    go run exercises/add_slices.go
#9h46

* Solução
.background imgs/bg.png
.play exercises/add_slices_solution.go /START OMIT/,/END OMIT/
#9h48m

* Intervalo
.background imgs/bg.png
#10h0m



* Goroutines
.background imgs/bg.png
#10h1m

* Goroutines
.background imgs/bg.png
- São o modelo de concorrência/paralelismo do Go;
- Ótima sintaxe
    go minhaFuncao()
#10h3m

* Goroutines
.background imgs/bg.png
.play samples/goroutines.go /START OMIT/,/END OMIT/
#10h6m

* Channels 
.background imgs/bg.png
- Channels são canais de comunicação entre goroutines
- Quando uma goroutine escreve em um channel, ela só pode escrever de novo quando ele for lido (se for um channel sem buffer)
#10h10m

* Channels
.background imgs/bg.png
.play samples/channels.go /START OMIT/,/END OMIT/
#10h13m

* Channels com buffer
.background imgs/bg.png
.play samples/channels_buffer.go /START OMIT/,/END OMIT/
#10h16m
 


* Um WebCrawler (semi)realista
.background imgs/bg.png
#10h24m

* O que é um WebCrawler?
.background imgs/bg.png
- É uma aplicação que fica baixando páginas da Internet.
- Normalmente, indexação(pesquisa do Google/Bing)
- Baixa o HTML de uma página, pega os links, baixa o HTML deles...

* Arquitetura
.background imgs/bg.png
.image imgs/webcrawler.png
#11h0m

* Definindo o tipo Link
.background imgs/bg.png
.play sitemap.go /START OMIT/,/END OMIT/

* A goroutine extrator
.background imgs/bg.png
.play extrator.go /START OMIT/,/END OMIT/

* A goroutine consumidor
.background imgs/bg.png
.play consumidor.go /START OMIT/,/END OMIT/

* Iniciando o WebCrawler
.background imgs/bg.png
.play main.go /START OMIT/,/END OMIT/


* Demonstração ao vivo!
.background imgs/bg.png 



* Continuação do tour
.background imgs/bg.png
#11h1m


* Métodos
.background imgs/bg.png
.play samples/methods.go /START OMIT/,/END OMIT/
#11h14m


* Interfaces
.background imgs/bg.png
- Implementação de interfaces implícita
- São um conjunto de métodos exigidos
.play samples/interfaces.go /START OMIT/,/END OMIT/
#11h20m

* Exercício
.background imgs/bg.png
- Abram o arquivo `exercises/interface.go`
- Façam com que o tipo circulo implemente a interface geometria

* Solução
.background imgs/bg.png
.play exercises/interface_solution.go /START OMIT/,/END OMIT/

* Readers e Writers
.background imgs/bg.png
- Interfaces para escrita e leitura, *para* *qualquer* *coisa*.
- Escrevendo em um arquivo? *Readers* *e* *Writers*
- Respondendo requests web? *Readers* *e* *Writers*
- Compactadando/descompactando um arquivo? *Readers* *e* *Writers*
- Criptografando/Descriptografando um arquivo? *Readers* *e* *Writers*
- Compactando, criptografando e enviando um dado por uma conexão de rede de uma vez só?  *Readers* *e* *Writers*
#11h25m


* O servidor web mais fácil que vocês já viram
.background imgs/bg.png
.play samples/webserver.go /START OMIT/,/END OMIT/
Aperte Run e clique
.link http://127.0.0.1:50000 Aqui
#11h30m

* Exercício 
.background imgs/bg.png
- Abram o arquivo `exercises/visit_count.go`
- Façam uma página que conta quantas vezes ela já foi visitada
- Se o visitante for o número 7, peça o número de cartão de crédito dele para que ele possa ganhar um prêmio
- Ao abrir a página, ele deve exibir algo como:
    Olá, você é o visitante número 3.
- Caso seja o visitante número 7, deve exibir:
    Parabéns!!!
    Você é o visitante número 7, clique aqui para receber o seu prêmio!
- Para executar, usar:
    go run exercises/visit_count.go
#11h40m

* Solução
.background imgs/bg.png
.play exercises/visit_count_solution.go /START OMIT/,/END OMIT/
Servidor rodando
.link http://127.0.0.1:50001 Aqui



* Considerações finais
.background imgs/bg.png
- Go é rápido
- Goroutines/Channels são ótimos
- Funções com múltiplos retornos!
- Servidor web sem instalar apache nem outras dependencias
- Orientação a objetos não é a resposta para tudo.
- Generics _fazem_ falta
- Go é mais que uma linguagem, _Go_ _é_ _um_ _ecossistema_
 

* Perguntas?
.background imgs/bg.png
#12h00m
